\NeedsTeXFormat{LaTeX2e}[2019/10/01]
\ProvidesPackage{derivative}[2022/12/27 v2.1]

\RequirePackage{xparse}
\RequirePackage{amsmath}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% definitions
\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define 'setup variables' (& default value)
\ExplSyntaxOn
\newcommand{\@derivative@d}{}
\newcommand{\@derivative@vecOp@opDeco@one}{}
\newcommand{\@derivative@vecOp@opDeco@two}{}
\newcommand{\@derivative@vecOp@opDeco@three}{}
\newcommand{\@derivative@vecOp@opDeco@four}{}
\newcommand{\@derivative@vecOp@opDeco@five}{}
\newcommand{\laplace}{}
\keys_define:nn{derivative}{
	% infinitesimal
	d .choice:,
	d / roman .code:n  = \renewcommand{\@derivative@d}{\textrm{d}},
	d / italic .code:n = \renewcommand{\@derivative@d}{d},
	% vector operator
	nabla-deco-1 .code:n = \renewcommand{\@derivative@vecOp@opDeco@one}{#1},
	nabla-deco-2 .code:n = \renewcommand{\@derivative@vecOp@opDeco@two}{#1},
	nabla-deco-3 .code:n = \renewcommand{\@derivative@vecOp@opDeco@three}{#1},
	nabla-deco-4 .code:n = \renewcommand{\@derivative@vecOp@opDeco@four}{#1},
	nabla-deco-5 .code:n = \renewcommand{\@derivative@vecOp@opDeco@five}{#1},
	% laplacian
	laplace .choice:,
	laplace / nabla .code:n = \renewcommand{\laplace}{\laplacen},
	laplace / delta .code:n = \renewcommand{\laplace}{\laplaced},
	laplace / Delta .code:n = \renewcommand{\laplace}{\laplaced},
}

% setup macro for user
\newcommand{\derivativesetup}[1]{
	\keys_set:nn{derivative}{#1}
}

\derivativesetup{
	d = roman,
	nabla-deco-1 = ',
	nabla-deco-2 = '',
	nabla-deco-3 = ''',
	nabla-deco-4 = '''',
	nabla-deco-5 = ''''',
	laplace = nabla,
}
\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% settings for options in \usepackage[]{derivative}
\DeclareOption{romand}{\derivativesetup{d = roman}}
\DeclareOption{italicd}{\derivativesetup{d = italic}}
\ExecuteOptions{romand} % default options
\ProcessOptions\relax


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ordinary derivative
\NewDocumentCommand\odr{m O{} m}{%
	\frac{%
		{\@derivative@d}^{#2} #3%
	}{%
		\@derivative@d #1^{#2}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% partial derivative (typical notation)

% counter for calculating order
\newcounter{@derivative@pdr@totalOrder}
% whether calculate order
% this is false if 'n' etc. is specified as order
\newif\if@derivative@pdr@calcOrder@
% calculate order
\newcommand{\@derivative@pdr@addToTotalOrder}[1]{%
	\ifx\hfuzz#1\hfuzz% #1 is empty
		\addtocounter{@derivative@pdr@totalOrder}{1}%
	\else%
		\addtocounter{@derivative@pdr@totalOrder}{#1}%
	\fi%
}
% print order
\newcommand{\@derivative@pdr@printTotalOrder}{%
	\ifnum\value{@derivative@pdr@totalOrder}=1% if order is 1
		% no print
	\else%
		\the@derivative@pdr@totalOrder% print order
	\fi%
}

%%%%%%%%%%%%%%%%%%
% reset inner variables
\newcommand{\@derivative@pdr@resetInnerVar}{%
	\setcounter{@derivative@pdr@totalOrder}{0}%
	%
	% (Re)define variables to temporarily store the denominator and numerator of the partial derivative
	\def\@derivative@pdr@denominator{}% denominator
	\def\@derivative@pdr@numerator{}% numerator
}

% to store the 3rd arg of \@derivative@pdr
\def\@derivative@pdr@arg@@@{}
% process arguments recursively
\NewDocumentCommand\@derivative@pdr{m O{} m}{%
	\renewcommand{\@derivative@pdr@arg@@@}{#3}%
	\ifx#3\@derivative@pdr@end%
		% process numerator (final step)
		\renewcommand{\@derivative@pdr@numerator}{%
			\partial^{%
 				\if@derivative@pdr@calcOrder@%
 					\@derivative@pdr@printTotalOrder%
 				\else%
 					#2%
 				\fi%
			} #1%
		}%
	\else%
		% process denominator
		\if@derivative@pdr@calcOrder@%
			\@derivative@pdr@addToTotalOrder{#2}% update total order
		\fi%
		%
		% update denominator
		\expandafter\renewcommand%
		\expandafter\@derivative@pdr@denominator%
		\expandafter{%
			\@derivative@pdr@denominator \partial #1^{#2}%
		}%
		%
		% recursion
		% add \expandafter to make \fi work properly
		\expandafter\expandafter\expandafter\@derivative@pdr%
		\expandafter\expandafter\expandafter{%
		\expandafter\@derivative@pdr@arg@@@%
		\expandafter}%
	\fi%
}

% for end judgement
\newcommand{\@derivative@pdr@end}{\@derivative@pdr@end@}

% main macro
\NewDocumentCommand{\pdr}{s m}{%
	% initialize internal variables
	\@derivative@pdr@resetInnerVar%
	\IfBooleanTF{#1}{%
		% do not calculate order if star, i.e. '*', is specified
		\@derivative@pdr@calcOrder@false%
	}{%
		\@derivative@pdr@calcOrder@true%
	}%
	% process arguments
	\@derivative@pdr#2\@derivative@pdr@end%
	% print result
	\frac{\@derivative@pdr@numerator}{\@derivative@pdr@denominator}%
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% partial derivative (notation especially used in theory of relativity)

\NewDocumentCommand\@derivative@pdrr{s m O{\hfuzz}}{%
	\ifx#3\@derivative@pdrr@end%
		% final step
		% print target function of differential operation
		#2%
	\else%
		% differential operation
		\IfBooleanTF{#1}{%
			% superscript if * was given
			\partial^{#2}%
		}{%
			% subscript
			\partial_{#2}%
		}%
		%
		% recursion
		\expandafter\@derivative@pdrr%
	\fi%
}

% for end judgement
\newcommand{\@derivative@pdrr@end}{\@derivative@pdrr@end@}

% main macro
\newcommand{\pdrr}[1]{%
	\@derivative@pdrr#1[\@derivative@pdrr@end]%
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% vector operator (grad, div, rot(curl), laplace)

% inner macro
\newcommand{\@derivative@vecOp@choiceDeco}[5]{
	\IfBooleanTF{#1}{
		\IfBooleanTF{#2}{
			\IfBooleanTF{#3}{
				\IfBooleanTF{#4}{
					\IfBooleanTF{#5}{
						\@derivative@vecOp@opDeco@five
					}{
						\@derivative@vecOp@opDeco@four
					}
				}{
					\@derivative@vecOp@opDeco@three
				}
			}{
				\@derivative@vecOp@opDeco@two
			}
		}{
			\@derivative@vecOp@opDeco@one
		}
	}{}
}

\NewDocumentCommand\@derivative@vecOp@procTarget{d() d[] t! g}{%
	\ensuremath{%
		\IfValueTF{#1}{%
			\@derivative@braceTagL(%
				#1%
			\@derivative@braceTagR)%
		}{%
			\IfValueTF{#2}{%
				\@derivative@braceTagL[%
					#2%
				\@derivative@braceTagR]%
			}{%
				\IfBooleanTF{#3}{% enforce to print {}
					\IfValueT{#4}{%
						\@derivative@braceTagL\{%
							#4%
						\@derivative@braceTagR\}%
					}
				}{%
					\IfValueT{#4}{% no brace
						#4%
					}
				}
			}
		}
	}
}
\NewDocumentCommand\@derivative@vecOp@setBraceTag{t\big t\Big t\bigg t\Bigg}{%
	\IfBooleanTF{#1}{
		\let\@derivative@braceTagL\bigl
		\let\@derivative@braceTagR\bigr
	}{
		\IfBooleanTF{#2}{
			\let\@derivative@braceTagL\Bigl
			\let\@derivative@braceTagR\Bigr
		}{
			\IfBooleanTF{#3}{
				\let\@derivative@braceTagL\biggl
				\let\@derivative@braceTagR\biggr
			}{
				\IfBooleanTF{#4}{
					\let\@derivative@braceTagL\Biggl
					\let\@derivative@braceTagR\Biggr
				}{
					\let\@derivative@braceTagL\left
					\let\@derivative@braceTagR\right
				}
			}
		}
	}
	\@derivative@vecOp@procTarget
}


% main macro (vector operator)
%
% (| represents the position to be expanded)
%   |\grad'''\big(f){g}
%-> \nabla'''|\@derivative@vecOp@setBraceTag\big(f){g}
%-> \nabla'''|\@derivative@vecOp@procTarget(f){g}
%-> \nabla'''\bigl(f\bigr)|{g}
%-> \nabla'''\bigl(f\bigr) g
%
%%%%%%%%%%%%%%%%%%%% grad %%%%%%%%%%%%%%%%%%%%%
\NewDocumentCommand\grad{t't't't't'}{%
	\ensuremath{%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}%
	}%
	\@derivative@vecOp@setBraceTag%
}
\NewDocumentCommand\gradr{t't't't't'}{%
	\ensuremath{%
		\textrm{grad}\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\,%
	}%
	\@derivative@vecOp@setBraceTag%
}
%%%%%%%%%%%%%%%%%%%% div %%%%%%%%%%%%%%%%%%%%%
\RenewDocumentCommand\div{t't't't't'}{%
	\ensuremath{%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\cdot%
	}%
	\@derivative@vecOp@setBraceTag%
}
\NewDocumentCommand\divr{t't't't't'}{%
	\ensuremath{%
		\textrm{div}\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\,%
	}%
	\@derivative@vecOp@setBraceTag%
}
%%%%%%%%%%%%%%%%% rot, curl %%%%%%%%%%%%%%%%%%
\NewDocumentCommand\rot{t't't't't'}{%
	\ensuremath{%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\times%
	}%
	\@derivative@vecOp@setBraceTag%
}
\NewDocumentCommand\rotr{t't't't't'}{%
	\ensuremath{%
		\textrm{rot}\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\,%
	}%
	\@derivative@vecOp@setBraceTag%
}
\newcommand{\curl}{\rot}
\NewDocumentCommand\curlr{t't't't't'}{%
	\ensuremath{%
		\textrm{curl}\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\,%
	}%
	\@derivative@vecOp@setBraceTag%
}
%%%%%%%%%%%%%%%%%% laplace %%%%%%%%%%%%%%%%%%%
% \laplace is defined at setup
%\newcommand{\laplace}{\laplacen}
\NewDocumentCommand\laplacen{t't't't't'}{%
	\ensuremath{%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}^{2}%
	}%
	\@derivative@vecOp@setBraceTag%
}
\NewDocumentCommand\laplaced{t't't't't'}{%
	\ensuremath{%
		\Delta\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}%
	}%
	\@derivative@vecOp@setBraceTag%
}
%%%%%%%%%%%%%%%%%%% hesse %%%%%%%%%%%%%%%%%%%%
\NewDocumentCommand\hesse{t't't't't'}{%
	\ensuremath{%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}\otimes%
		\nabla\@derivative@vecOp@choiceDeco{#1}{#2}{#3}{#4}{#5}%
	}%
	\@derivative@vecOp@setBraceTag%
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% end of definitions
\makeatother